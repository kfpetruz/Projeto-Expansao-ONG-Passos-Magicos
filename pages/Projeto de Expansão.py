# Importa√ß√£o das bibliotecas
import streamlit as st
import pandas as pd
import plotly.express as px
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import colors
from sklearn.preprocessing import StandardScaler, MinMaxScaler #Feature Engineer
from sklearn.cluster import KMeans # Algoritmo de Agrupamento
from sklearn.metrics import adjusted_rand_score, silhouette_score

# Configura√ß√£o da p√°gina
st.set_page_config(page_title= 'ONG Passos M√°gicos', layout='wide', page_icon= 'ü§ù')
cor_estilizada = 'color: #1A4A6A;'
fonte_negrito = 'font-weight: bold;'
fonte_escura = 'color: #292F39;'

# T√≠tulo da p√°gina
st.markdown(f"<h1 style='{fonte_escura} {fonte_negrito}'> Projeto de expans√£o ü§ù </h1>", unsafe_allow_html=True)


#PREPARA√á√ÉO DOS DADOS
dados_externos = pd.read_excel('tb_populacao_economia_idade_distancia.xlsx')

dados_externos['percent_elegiveis_6a19a'] = dados_externos['Pessoas de 6 a 19 anos'] / dados_externos['Popula√ß√£o no √∫ltimo censo'] * 100
dados_externos['Matriculados/Popula√ß√£o 6 a 19'] = dados_externos['Matriculados/Popula√ß√£o 6 a 19'] * 100

dados_externos = dados_externos[['Munic√≠pio', 'Sal√°rio m√©dio mensal dos trabalhadores formais', 'PIB per capita', 'Popula√ß√£o no √∫ltimo censo', 'Densidade demogr√°fica habitante/km¬≤', 'Dist√¢ncia', 'Matriculados/Popula√ß√£o 6 a 19', 'percent_elegiveis_6a19a']]
dados_externos = dados_externos.rename(columns= {'Munic√≠pio': 'municipio', 'Sal√°rio m√©dio mensal dos trabalhadores formais': 'salario_medio_trabalhadores', 'PIB per capita': 'pib_per_capita', '√Årea da unidade territorial': 'area_territorial', 'Popula√ß√£o no √∫ltimo censo': 'populacao', 'Densidade demogr√°fica habitante/km¬≤': 'densidade_demografica_km2', 'Dist√¢ncia': 'distancia_de_embu_guacu', 'Matriculados/Popula√ß√£o 6 a 19': 'percent_matriculados_6a19a'})

# Modelo matem√°tico
dados_model_math = dados_externos[['municipio', 'salario_medio_trabalhadores', 'pib_per_capita', 'densidade_demografica_km2', 'distancia_de_embu_guacu', 'percent_matriculados_6a19a', 'percent_elegiveis_6a19a']]

# Normalizandos os dados
variaveis_normalizar = ['densidade_demografica_km2', 'percent_elegiveis_6a19a']
variaveis_normalizar_inversamente = ['salario_medio_trabalhadores','pib_per_capita', 'distancia_de_embu_guacu', 'percent_matriculados_6a19a']

scaler = MinMaxScaler()
dados_model_math[variaveis_normalizar] = scaler.fit_transform(dados_model_math[variaveis_normalizar])

    # Normaliza√ß√£o inversa
scaler = MinMaxScaler()
dados_model_math[variaveis_normalizar_inversamente] = 1 - scaler.fit_transform(dados_model_math[variaveis_normalizar_inversamente])


## VISUALIZA√á√ÉO NO STREAMLIT
aba1, aba2= st.tabs(['Modelo', 'Propostas'])
with aba1:
    st.markdown(f'<p style="text-align: justify; {fonte_escura}"> Para auxiliar a ONG em seu desejo de expandir as atividades, ampliando a capacidade, para que ela possa atender e mudar a vida de centenas de crian√ßas e adolescentes como vem fazendo h√° anos na cidade de Embu-Gua√ßu, foram criados dois modelos, levando em considera√ß√£o dados <strong> econ√¥micos </strong>, de <strong> popula√ß√£o </strong>, <strong> educacionais </strong>, com base no √∫ltimo censo, e de <strong> dist√¢ncia da cidade sede</strong>  com base numa biblioteca geogr√°fica do Python.</p>', unsafe_allow_html = True)

    st.markdown(f'<p style="text-align: justify; {fonte_escura}"> Em ambos os modelos foram consideradas as 645 cidades do estado de S√£o Paulo, a fim de prop√¥r as <strong> potenciais cidades </strong> onde a ONG poder√° investir seus esfor√ßos.</p>', unsafe_allow_html = True)

    st.markdown(f'<p style="text-align: justify; {fonte_escura}"> Nesta an√°lise, certos campos, como sal√°rio, t√™m um impacto maior no algoritmo quando s√£o menores. Em termos de peso, isso significa que, quanto menor o sal√°rio, mais significativo √© o efeito dele na an√°lise.</p>', unsafe_allow_html = True)
    
    st.markdown(f"<h3 style='{cor_estilizada}'> Vari√°veis analisadas separadas por efeito </h3>", unsafe_allow_html=True)
    pesos = {
    'Quanto menor, maior o peso': ['Sal√°rio m√©dio dos trabalhadores formais; √çndice de desenvolvimento humano municipal (IDHM); PIB per capita; Percentual de alunos matriculados;'],
    'Quanto maior, maior o peso': ['Densidade demogr√°fica - habitantes/km¬≤; Percentual de crian√ßas e jovens em idade eleg√≠vel;']}
    
    df_pesos = pd.DataFrame(pesos)
    html = df_pesos.to_html(index=False)

    # Adicionando estilos CSS para a cor da borda de todas as c√©lulas
    html_estilizado = html.replace('<th>', '<th style=\'border: 2px solid #0145AC; text-align: center; color: #292F39;\'>').replace('<td>', '<td style=\'border: 2px solid #0145AC; text-align: center; color: #292F39;\'>')

    # Exibir a tabela estilizada no Streamlit
    st.write("<style>table {{ width: 100%; border-collapse: collapse; }} th, td {{ padding: 10px; }}</style>{}".format(html_estilizado), unsafe_allow_html=True)
    st.markdown('<p style="text-align: justify; padding: 10px;"></p>', unsafe_allow_html = True) #linha para aumentar o espa√ßo

    #ESCOLHA DAS PRIORIDADES
    st.markdown(f'<p style="text-align: justify; {fonte_escura}"> Abaixo, os administradores da ONG t√™m a op√ß√£o de selecionar a relev√¢ncia atribu√≠da a cada uma das vari√°veis nas an√°lises. Podem testar diferentes graus de import√¢ncia e realizar uma variedade de testes conforme desejarem.</p>', unsafe_allow_html = True) 
    
    st.markdown(f'<p style="text-align: justify; {fonte_escura}"> Escolha a <strong> relev√¢ncia das vari√°veis, de 1 a 6 </strong>. Quanto maior o n√∫mero, maior o peso. Os pesos escolhidos nesta se√ß√£o se aplicam tanto ao <strong> Modelo Matem√°tico </strong> quanto ao <strong> Modelo K-means </strong></p>', unsafe_allow_html = True)
    col1, col2 = st.columns(2)
    with col1:
        # Pesos
        #st.markdown('<p>Escolha o peso que a <strong> dist√¢ncia </strong> que a cidade tem de Embu-Gua√ßu ter√° (de 1 a 6):</p>', unsafe_allow_html = True)
        prioridade_distancia_embu = st.number_input("Dist√¢ncia que a cidade tem de Embu-Gua√ßu:", min_value=1, value=6, max_value=6)
        prioridade_salario_medio = st.number_input("Sal√°rio m√©dio mensal dos trabalhadores:", min_value=1, value=5, max_value=6)
        prioridade_pib_per_capita = st.number_input("PIB per capita:", min_value=1, value=4, max_value=6)
    with col2:
        prioridade_percent_idade_elegivel = st.number_input("Percentual de crian√ßas e jovens em idade eleg√≠vel :", min_value=1, value=3, max_value=6)
        prioridade_percent_matriculados = st.number_input("Percentual de matriculados em idade eleg√≠vel:", min_value=1, value=2, max_value=6)
        prioridade_densidade_demografica = st.number_input("Densidade demogr√°fica:", min_value=1, value=1, max_value=6)

        # Atribui√ß√£o de pesos
    dados_model_math['distancia_de_embu_guacu'] = prioridade_distancia_embu * dados_model_math['distancia_de_embu_guacu']
    dados_model_math['salario_medio_trabalhadores'] = prioridade_salario_medio * dados_model_math['salario_medio_trabalhadores']
    dados_model_math['pib_per_capita'] = prioridade_pib_per_capita * dados_model_math['pib_per_capita']
    dados_model_math['percent_elegiveis_6a19a'] = prioridade_percent_idade_elegivel * dados_model_math['percent_elegiveis_6a19a']
    dados_model_math['percent_matriculados_6a19a'] = prioridade_percent_matriculados * dados_model_math['percent_matriculados_6a19a']
    dados_model_math['densidade_demografica_km2'] = prioridade_densidade_demografica * dados_model_math['densidade_demografica_km2']
    
    st.markdown('<p style="text-align: justify; padding: 10px;"></p>', unsafe_allow_html = True) #linha para aumentar o espa√ßo

    #MODELO MATEM√ÅTICO
    st.markdown(f"<h3 style='{cor_estilizada}'> Modelo Matem√°tico </h3>", unsafe_allow_html=True)
    st.markdown('<p style="text-align: justify;"> O modelo matem√°tico calcula o valor das vari√°veis de acordo com os pesos escolhidos acima e dele extra√≠mos o coeficiente chamado "resultado_modelo_expansao", que pode ser visto ao final da tabela. Quanto maior o resultado, maior o indicador de que a ONG deve expandir suas atividades para a respectiva cidade. </p>', unsafe_allow_html = True) 

        # Soma ponderada
    dados_model_math['resultado_modelo_expansao'] = dados_model_math[['distancia_de_embu_guacu', 'salario_medio_trabalhadores', 'pib_per_capita', 'percent_elegiveis_6a19a', 'percent_matriculados_6a19a', 'densidade_demografica_km2']].sum(axis=1)

        # Classificar o DataFrame com base na soma ponderada
    dados_externos_model_math = pd.merge(dados_externos, dados_model_math[['municipio', 'resultado_modelo_expansao']], on='municipio', how='left') #Merge dos dados originais, sem normaliza√ß√£o, com o resultado do modelo matem√°tico
    dados_externos_model_math = dados_externos_model_math.sort_values('resultado_modelo_expansao', ascending = False)

        #Mostra o dataframe gerado pelo modelo
    quantidade_cidades = st.number_input("Escolha a quantidade de cidades que deseja visualizar, entre as melhores classificadas, para potencial expans√£o das atividades da ONG:", min_value=1, value=15, max_value=645)
    st.markdown(f'<p style="text-align: justify; {fonte_escura}"> De acordo com os pesos escolhidos acima, as <strong> cidades mais indicadas </strong> s√£o:</p>', unsafe_allow_html = True) 
    st.dataframe(dados_externos_model_math.reset_index(drop=True).head(quantidade_cidades))

    st.markdown('<p style="text-align: justify; padding: 10px;"></p>', unsafe_allow_html = True) #linha para aumentar o espa√ßo

    #MODELO UTILIZANDO ALGORITMO K-MEANS
    st.markdown(f"<h3 style='{cor_estilizada}'> Modelo K-means </h3>", unsafe_allow_html=True)
    st.markdown(f'<p style="text-align: justify; {fonte_escura}"> O modelo K-means tamb√©m usa os pesos definidos acima pelos administradores da ONG, por√©m, neste modelo, √© feito um c√°lculo de aproxima√ß√£o dos indicadores das cidades do estado de S√£o Paulo com os indicadores da cidade de Embu-Gua√ßu. Assim, as cidades mais semelhantes (de acordo com os indicadores) ficar√£o no mesmo grupo que a cidade de Embu-Gua√ßu, e, portanto, recomenda-se a expans√£o a partir dessas cidades.</p>', unsafe_allow_html = True) 

    dados_model_kmeans = dados_model_math.drop('resultado_modelo_expansao', axis = 1)
    kmeans = KMeans(n_clusters=6,random_state=0) #definindo os hiperparametros do algoritmo (definir o n√∫mero de grupo = cluster)

    #Implementando o K-Means nos dados:
    kmeans.fit(dados_model_kmeans[['distancia_de_embu_guacu', 'salario_medio_trabalhadores', 'pib_per_capita', 'percent_elegiveis_6a19a', 'percent_matriculados_6a19a', 'densidade_demografica_km2']])

    #Salvando os centroides de cada cluster
    centroides = kmeans.cluster_centers_

    #Salvando os labels dos clusters para cada exemplo
    kmeans_labels = kmeans.predict(dados_model_kmeans[['distancia_de_embu_guacu', 'salario_medio_trabalhadores', 'pib_per_capita', 'percent_elegiveis_6a19a', 'percent_matriculados_6a19a', 'densidade_demografica_km2']])

    dados_model_kmeans['grupos'] = kmeans_labels

    #pd.Series(kmeans_labels).value_counts() #Contagem de quantas cidades ficaram em cada grupo

    dados_externos_order_math = dados_externos_model_math.drop('resultado_modelo_expansao', axis = 1)
    dados_externos_model_kmeans = pd.merge(dados_externos_order_math, dados_model_kmeans[['municipio', 'grupos']], on='municipio', how='left')
    grupo_embu = dados_externos_model_kmeans[dados_externos_model_kmeans['municipio'] == 'Embu-Gua√ßu']['grupos'].values
    qtd_cidades_grupo_embu = dados_externos_model_kmeans[dados_externos_model_kmeans['grupos'] == grupo_embu[0]].shape[0]

    st.markdown(f'<p style="text-align: justify; {fonte_escura}"> De acordo com os pesos escolhidos acima, as <strong> cidades mais indicadas </strong> s√£o as <strong> {qtd_cidades_grupo_embu} </strong> listadas abaixo:</p>', unsafe_allow_html = True) 

    st.dataframe(dados_externos_model_kmeans[dados_externos_model_kmeans['grupos'] == grupo_embu[0]].reset_index(drop=True))


with aba2:
    st.markdown(f'<p style="text-align: justify; {fonte_escura}"> Ap√≥s analisar os dados hist√≥ricos da ONG, dados da PEDE (Pesquisa de Desenvolvimento Educacional), os recursos digitais utilizados atualmente pela ONG, dados da economia, popula√ß√£o e educacionais de Embu-Gua√ßu e demais cidades do estado de S√£o Paulo, listamos as melhores propostas escolhidas para a ONG concretizar seu plano de expans√£o.</p>', unsafe_allow_html = True)

    st.markdown('<p style="text-align: justify; padding: 2px;"></p>', unsafe_allow_html = True) #linha para aumentar o espa√ßo
    st.markdown(f'<h5 style="{cor_estilizada}"> Expandir a partir das cidades selecionadas no Modelo Matem√°tico ou Modelo K-means </h5>', unsafe_allow_html=True)
    st.markdown(f'<p style="text-align: justify; {fonte_escura}"> Acreditamos que, num plano de expans√£o de suas atividades, a ONG ter√° maior impacto social e chance de sucesso ao escolher iniciar pelas cidades selecionadas nos modelos Matem√°tico ou K-means, pois as cidades ali selecionadas, al√©m de serem mais carentes de a√ß√µes como as da ONG, t√™m um perfil semelhante ao que ela est√° habituada a atender.</p>', unsafe_allow_html = True)

    st.markdown('<p style="text-align: justify; padding: 2px;"></p>', unsafe_allow_html = True) #linha para aumentar o espa√ßo
    st.markdown(f'<h5 style="{cor_estilizada}"> Disponibilizar meios de doa√ß√£o por boleto, cart√£o de cr√©dito, pix, entre outros, diretamente pelo site </h5>', unsafe_allow_html=True)
    st.markdown(f'<p style="text-align: justify; {fonte_escura}"> Na era em que tudo √© feito √†s pressas, acreditamos que haveria um ganho ao incluir a possibilidade de doa√ß√£o direto no site, atrav√©s de meios de doa√ß√£o de autoatendimento, tirando a necessidade de a pessoa doadora ter que entrar em contato com a ONG, aguardar atendimento, tendo assim at√© mesmo a possibilidade de a pessoa desistir da doa√ß√£o nesse meio tempo. </p>', unsafe_allow_html = True)
    st.markdown(f'<p style="text-align: justify; {fonte_escura}"> √â sabido que √© necess√°rio contrato com adquirentes de cart√£o de cr√©dito, bancos, entre outros intermediadores, para viabilizar algo do tipo, por√©m, vemos uma possibilidade de ganho nessa frente, especialmente quando se fala de pequenos doadores. </p>', unsafe_allow_html = True)

    
    st.markdown('<p style="text-align: justify; padding: 2px;"></p>', unsafe_allow_html = True) #linha para aumentar o espa√ßo
    st.markdown(f'<h5 style="{cor_estilizada}"> Inclus√£o de op√ß√£o de valores pr√©-cadastrados</h5>', unsafe_allow_html=True)
    st.markdown(f'<p style="text-align: justify; {fonte_escura}"> Inclus√£o de op√ß√£o de valores pr√©-cadastrados, deixando a op√ß√£o "outros" habilitada tamb√©m para caso a pessoa doadora queira doar um valor diferente e at√© pessoas que queiram doar de forma recorrente.</p>', unsafe_allow_html = True)

    st.markdown(f'<p style="text-align: justify; {fonte_escura}"> Abaixo um exemplo gr√°fico de como poderia ser a p√°gina de doa√ß√µes no site da ONG.</p>', unsafe_allow_html = True)
    st.markdown("<hr style='border: 1px solid #ccc;'>", unsafe_allow_html=True) #Linha cinza s√≥lida

    #FORMUL√ÅRIO DE DOA√á√ÉO
    st.markdown(f"<h2 style='{cor_estilizada}; text-align: center'><span style='{fonte_negrito}'>COMO DOAR?</span></h2>", unsafe_allow_html=True)

    st.markdown(f"<h5 style='{cor_estilizada}; text-align: center'>Ajude a fazer a diferen√ßa! Sua doa√ß√£o √© fundamental para o sucesso da nossa miss√£o.</h5>", unsafe_allow_html=True)


    # Valores de doa√ß√£o em bot√µes e op√ß√£o de inserir outros valores
    st.markdown(f"<h4 style='{fonte_negrito} {fonte_escura}'> Selecione ou insira o valor da sua doa√ß√£o: </h4>", unsafe_allow_html=True)
    valores_doacao = [10, 20, 50, 100, 200, "Outro"]
    valor_doacao = st.radio("Escolha o valor:", valores_doacao)
    if valor_doacao == "Outro":
        valor_doacao = st.number_input("Digite o valor da doa√ß√£o:", step=10.0)

    # Op√ß√£o de recorr√™ncia de doa√ß√£o
    recorrencia = st.radio("Deseja fazer uma doa√ß√£o √∫nica ou recorrente?", ["√önica", "Recorrente"])

    # Formas de pagamento
    st.markdown(f"<h4 style='{fonte_negrito} {fonte_escura}'> Selecione a forma de pagamento: </h4>", unsafe_allow_html=True)
    forma_pagamento = st.selectbox("Forma de pagamento:", ["Cart√£o de cr√©dito", "Boleto banc√°rio", "PIX"])

    # Formul√°rio para preencher dados pessoais e de pagamento
    st.markdown(f"<h4 style='{fonte_negrito} {fonte_escura}'> Preencha seus dados: </h4>", unsafe_allow_html=True)
    nome = st.text_input("Nome completo:")
    email = st.text_input("Email:")
    endereco = st.text_input("Endere√ßo:")
    cidade = st.text_input("Cidade:")
    estado = st.text_input("Estado:")
    cep = st.text_input("CEP:")

    if forma_pagamento == "Cart√£o de cr√©dito":
        numero_cartao = st.text_input("N√∫mero do cart√£o:")
        data_validade = st.text_input("Data de validade (MM/AAAA):")
        cvv = st.text_input("CVV:")

    # Bot√£o para confirmar doa√ß√£o
    if st.button("Confirmar Doa√ß√£o"):
        if forma_pagamento == "Cart√£o de cr√©dito":
            # Aqui voc√™ pode adicionar a l√≥gica para processar o pagamento com cart√£o de cr√©dito
            if recorrencia == "√önica":
                st.success(f"Obrigado por sua doa√ß√£o √∫nica de R${valor_doacao}!")
            else:
                st.success(f"Obrigado por sua doa√ß√£o recorrente de R${valor_doacao}!")
        else:
            # Aqui voc√™ pode adicionar a l√≥gica para gerar o boleto banc√°rio
            if recorrencia == "√önica":
                st.success(f"Obrigado por sua doa√ß√£o √∫nica de R${valor_doacao}! Seu boleto ser√° enviado para o email {email}.")
            else:
                st.success(f"Obrigado por sua doa√ß√£o recorrente de R${valor_doacao}! Seu boleto ser√° enviado para o email {email}.")
    st.markdown("<hr style='border: 1px solid #ccc;'>", unsafe_allow_html=True) #Linha cinza s√≥lida

