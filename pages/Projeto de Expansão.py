# Importa√ß√£o das bibliotecas
import streamlit as st
import pandas as pd
import plotly.express as px
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import colors
from sklearn.preprocessing import StandardScaler, MinMaxScaler #Feature Engineer
from sklearn.cluster import KMeans # Algoritmo de Agrupamento
from sklearn.metrics import adjusted_rand_score, silhouette_score

# Configura√ß√£o da p√°gina
st.set_page_config(page_title= 'ONG Passos M√°gicos', layout='wide', page_icon= 'ü§ù')

# T√≠tulo da p√°gina
st.title('Projeto de expans√£o ü§ù')

#PREPARA√á√ÉO DOS DADOS
dados_externos = pd.read_excel('tb_populacao_economia_idade_distancia.xlsx')

dados_externos['percent_elegiveis_6a19a'] = dados_externos['Pessoas de 6 a 19 anos'] / dados_externos['Popula√ß√£o no √∫ltimo censo'] * 100
dados_externos['Matriculados/Popula√ß√£o 6 a 19'] = dados_externos['Matriculados/Popula√ß√£o 6 a 19'] * 100

dados_externos = dados_externos[['Munic√≠pio', 'Sal√°rio m√©dio mensal dos trabalhadores formais', 'PIB per capita', 'Popula√ß√£o no √∫ltimo censo', 'Densidade demogr√°fica habitante/km¬≤', 'Dist√¢ncia', 'Matriculados/Popula√ß√£o 6 a 19', 'percent_elegiveis_6a19a']]
dados_externos = dados_externos.rename(columns= {'Munic√≠pio': 'municipio', 'Sal√°rio m√©dio mensal dos trabalhadores formais': 'salario_medio_trabalhadores', 'PIB per capita': 'pib_per_capita', '√Årea da unidade territorial': 'area_territorial', 'Popula√ß√£o no √∫ltimo censo': 'populacao', 'Densidade demogr√°fica habitante/km¬≤': 'densidade_demografica_km2', 'Dist√¢ncia': 'distancia_de_embu_guacu', 'Matriculados/Popula√ß√£o 6 a 19': 'percent_matriculados_6a19a'})

# Modelo matem√°tico
dados_model_math = dados_externos[['municipio', 'salario_medio_trabalhadores', 'pib_per_capita', 'densidade_demografica_km2', 'distancia_de_embu_guacu', 'percent_matriculados_6a19a', 'percent_elegiveis_6a19a']]

# Normalizandos os dados
variaveis_normalizar = ['densidade_demografica_km2', 'percent_elegiveis_6a19a']
variaveis_normalizar_inversamente = ['salario_medio_trabalhadores','pib_per_capita', 'distancia_de_embu_guacu', 'percent_matriculados_6a19a']

scaler = MinMaxScaler()
dados_model_math[variaveis_normalizar] = scaler.fit_transform(dados_model_math[variaveis_normalizar])

    # Normaliza√ß√£o inversa
scaler = MinMaxScaler()
dados_model_math[variaveis_normalizar_inversamente] = 1 - scaler.fit_transform(dados_model_math[variaveis_normalizar_inversamente])


## VISUALIZA√á√ÉO NO STREAMLIT
aba1, aba2= st.tabs(['Modelo', 'Propostas'])
with aba1:
    st.markdown('<p style="text-align: justify;"> Para auxiliar a ONG em seu desejo de expandir as atividades, ampliando a capacidade, para que ela possa atender e mudar a vida de centenas de crian√ßas e adolescentes como vem fazendo h√° anos na cidade de Embu-Gua√ßu, foram criados dois modelos, levando em considera√ß√£o dados <strong> econ√¥micos </strong>, de <strong> popula√ß√£o </strong>, <strong> educacionais </strong> e de <strong> dist√¢ncia da cidade sede </strong>.</p>', unsafe_allow_html = True)

    st.markdown('<p style="text-align: justify;"> Em ambos os modelos foram consideradas as 645 cidades do estado de S√£o Paulo e atribu√≠dos pesos aos seus indicadores, com base no √∫ltimo censo geogr√°fico, por ordem de prioridade.</p>', unsafe_allow_html = True)

    # st.markdown('<p style="text-align: justify;"> <strong> Quanto menor, maior o peso: </strong> </p>', unsafe_allow_html = True)
    # st.markdown('- <p style="text-align: justify;"> Sal√°rio m√©dio dos trabalhadores formais;</p>', unsafe_allow_html = True)
    # st.markdown('- <p style="text-align: justify;"> √çndice de desenvolvimento humano municipal (IDHM);</p>', unsafe_allow_html = True)
    # st.markdown('- <p style="text-align: justify;"> PIB per capita;</p>', unsafe_allow_html = True)
    # st.markdown('- <p style="text-align: justify;"> Percentual de alunos matriculados;</p>', unsafe_allow_html = True)

    # st.markdown('<p style="text-align: justify;"> <strong> Quanto maior, maior o peso: </strong> </p>', unsafe_allow_html = True)
    # st.markdown('- <p style="text-align: justify;"> Densidade demogr√°fica - habitantes/km¬≤;</p>', unsafe_allow_html = True)
    # st.markdown('- <p style="text-align: justify;"> Percentual de crian√ßas e jovens em idade eleg√≠vel;</p>', unsafe_allow_html = True)

    pesos = {
    'Quanto menor, maior o peso': ['Sal√°rio m√©dio dos trabalhadores formais; √çndice de desenvolvimento humano municipal (IDHM); PIB per capita; Percentual de alunos matriculados;'],
    'Quanto maior, maior o peso': ['Densidade demogr√°fica - habitantes/km¬≤; Percentual de crian√ßas e jovens em idade eleg√≠vel;']}
    
    df_pesos = pd.DataFrame(pesos)
    html = df_pesos.to_html(index=False)

    # Adicionando estilos CSS para a cor da borda de todas as c√©lulas
    html_estilizado = html.replace('<th>', '<th style=\'border: 2px solid #0145AC; text-align: center;\'>').replace('<td>', '<td style=\'border: 2px solid #0145AC; text-align: center;\'>')

    # Exibir a tabela estilizada no Streamlit
    st.write("<style>table {{ width: 100%; border-collapse: collapse; }} th, td {{ padding: 10px; }}</style>{}".format(html_estilizado), unsafe_allow_html=True)
    st.markdown('<p style="text-align: justify; padding: 10px;"></p>', unsafe_allow_html = True) #linha para aumentar o espa√ßo

    #ESCOLHA DAS PRIORIDADES
    st.markdown('<p style="text-align: justify;"> Abaixo, os administradores da ONG t√™m a op√ß√£o de escolher a prioridade que cada uma das vari√°veis ter√° nas an√°lises, bem como testar prioridades diferentes e realizar diversos testes √† sua escolha.</p>', unsafe_allow_html = True) 
    
    st.markdown('<p style="text-align: justify;"> Escolha a <strong> prioridade das vari√°veis, de 1 a 6 </strong>. Quanto maior o n√∫mero, maior a prioridade.</p>', unsafe_allow_html = True)
    col1, col2 = st.columns(2)
    with col1:
        # Pesos
        #st.markdown('<p>Escolha o peso que a <strong> dist√¢ncia </strong> que a cidade tem de Embu-Gua√ßu ter√° (de 1 a 6):</p>', unsafe_allow_html = True)
        prioridade_distancia_embu = st.number_input("Dist√¢ncia que a cidade tem de Embu-Gua√ßu:", min_value=1, value=6, max_value=6)
        prioridade_salario_medio = st.number_input("Sal√°rio m√©dio mensal dos trabalhadores:", min_value=1, value=5, max_value=6)
        prioridade_pib_per_capita = st.number_input("Pib per capita:", min_value=1, value=4, max_value=6)
    with col2:
        prioridade_percent_idade_elegivel = st.number_input("Percentual de crian√ßas e jovens em idade eleg√≠vel :", min_value=1, value=3, max_value=6)
        prioridade_percent_matriculados = st.number_input("Percentual de matriculados em idade eleg√≠vel:", min_value=1, value=2, max_value=6)
        prioridade_densidade_demografica = st.number_input("Densidade demogr√°fica:", min_value=1, value=1, max_value=6)

        # Atribui√ß√£o de pesos
    dados_model_math['distancia_de_embu_guacu'] = prioridade_distancia_embu * dados_model_math['distancia_de_embu_guacu']
    dados_model_math['salario_medio_trabalhadores'] = prioridade_salario_medio * dados_model_math['salario_medio_trabalhadores']
    dados_model_math['pib_per_capita'] = prioridade_pib_per_capita * dados_model_math['pib_per_capita']
    dados_model_math['percent_elegiveis_6a19a'] = prioridade_percent_idade_elegivel * dados_model_math['percent_elegiveis_6a19a']
    dados_model_math['percent_matriculados_6a19a'] = prioridade_percent_matriculados * dados_model_math['percent_matriculados_6a19a']
    dados_model_math['densidade_demografica_km2'] = prioridade_densidade_demografica * dados_model_math['densidade_demografica_km2']
    
    st.markdown('<p style="text-align: justify; padding: 10px;"></p>', unsafe_allow_html = True) #linha para aumentar o espa√ßo

    #MODELO MATEM√ÅTICO
    st.subheader('Modelo matem√°tico')
    st.markdown('<p style="text-align: justify;"> O modelo matem√°tico calcula o peso das vari√°veis a partir das prioridades escolhidas acima e dele extra√≠mos o coeficiente chamado "resultado_modelo_expansao", que pode ser visto ao final da tabela. Quanto maior o resultado, maior o indicador de que a ONG deve expandir suas atividades para a respectiva cidade. </p>', unsafe_allow_html = True) 

    st.markdown('<p style="text-align: justify;"> De acordo com as prioridades escolhidas acima, as <strong> cidades mais indicadas </strong> para a ONG expandir suas atividades s√£o:.</p>', unsafe_allow_html = True) 

        # Soma ponderada
    dados_model_math['resultado_modelo_expansao'] = dados_model_math[['distancia_de_embu_guacu', 'salario_medio_trabalhadores', 'pib_per_capita', 'percent_elegiveis_6a19a', 'percent_matriculados_6a19a', 'densidade_demografica_km2']].sum(axis=1)

        # Classificar o DataFrame com base na soma ponderada
    dados_externos_model_math = pd.merge(dados_externos, dados_model_math[['municipio', 'resultado_modelo_expansao']], on='municipio', how='left') #Merge dos dados originais, sem normaliza√ß√£o, com o resultado do modelo matem√°tico
    dados_externos_model_math = dados_externos_model_math.sort_values('resultado_modelo_expansao', ascending = False)

        #Mostra o dataframe gerado pelo modelo
    quantidade_cidades = st.number_input("Escolha a quantidade de TOP cidades indicadas para potencial expans√£o das atividades da ONG:", min_value=1, value=15, max_value=645)
    st.dataframe(dados_externos_model_math.head(quantidade_cidades))

    st.markdown('<p style="text-align: justify; padding: 10px;"></p>', unsafe_allow_html = True) #linha para aumentar o espa√ßo

    #MODELO UTILIZANDO ALGORITMO K-MEANS
    st.subheader('Modelo K-means')

    st.markdown('<p style="text-align: justify;"> O modelo K-means tamb√©m usa as prioridades definidas acima pelos administradores da ONG, por√©m neste modelo, √© feito um c√°clculo de aproxima√ß√£o dos indicadores das cidades do estado de S√£o Paulo com os indicadores da cidade de Embu-Gua√ßu. Assim, as cidades mais pr√≥ximas (de acordo com os indicadores e n√£o somente com dist√¢ncia geogr√°fica) ficar√£o no mesmo grupo que a cidade de Embu-Gua√ßu, e, portanto, recomenda-se a expans√£o a partir dessas cidades.</p>', unsafe_allow_html = True) 

    dados_model_kmeans = dados_model_math.drop('resultado_modelo_expansao', axis = 1)
    qtd_clusters = st.number_input("Escolha a quantidade de grupos em que deseja dividir as cidades do estado de S√£o Paulo:", min_value=1, value=8, max_value=10)
    kmeans = KMeans(n_clusters=qtd_clusters,random_state=0) #definindo os hiperparametros do algoritmo (definir o n√∫mero de grupo = cluster)

    #Implementando o K-Means nos dados:
    kmeans.fit(dados_model_kmeans[['distancia_de_embu_guacu', 'salario_medio_trabalhadores', 'pib_per_capita', 'percent_elegiveis_6a19a', 'percent_matriculados_6a19a', 'densidade_demografica_km2']])

    #Salvando os centroides de cada cluster
    centroides = kmeans.cluster_centers_

    #Salvando os labels dos clusters para cada exemplo
    kmeans_labels = kmeans.predict(dados_model_kmeans[['distancia_de_embu_guacu', 'salario_medio_trabalhadores', 'pib_per_capita', 'percent_elegiveis_6a19a', 'percent_matriculados_6a19a', 'densidade_demografica_km2']])

    dados_model_kmeans['grupos'] = kmeans_labels

    #pd.Series(kmeans_labels).value_counts()

    dados_externos_order_math = dados_externos_model_math.drop('resultado_modelo_expansao', axis = 1)
    dados_externos_model_kmeans = pd.merge(dados_externos_order_math, dados_model_kmeans[['municipio', 'grupos']], on='municipio', how='left')

    # Criando a figura
    fig = plt.figure()

    # Plotando os dados identificando com os seus clusters
    plt.scatter(dados_model_kmeans['distancia_de_embu_guacu'],
                dados_model_kmeans['salario_medio_trabalhadores'],
                c=kmeans_labels,
                alpha=0.5,
                cmap='rainbow')

    # Plotando os centroides
    plt.scatter(centroides[:, 0],
                centroides[:, 1],
                c='black',
                marker='X',
                s=200,
                alpha=0.5)

    plt.xlabel('Dist√¢ncia de Embu Gua√ßu')
    plt.ylabel('Sal√°rio M√©dio dos Trabalhadores')
    plt.title('Clusters Identificados')
    plt.rcParams['figure.figsize'] = (10, 5)

    # Definindo a cor de fundo
    fig.patch.set_facecolor('#F2F2F2')
    plt.show()

with aba2:
    st.title('Propostas para Expans√£o')

    st.markdown('<p style="text-align: justify;"> Ap√≥s analisar os dados hist√≥ricos da ONG, dados da PEDE (Pesquisa de Desenvolvimento Educacional), os recursos digitais utilizados atualmente pela ONG, dados de economia, popula√ß√£o e educacionais de Embu-Gua√ßu e demais cidades do estado de S√£o Paulo, listamos as melhores propostas escolhidas para a ONG concretizar seu plano de expans√£o.</p>', unsafe_allow_html = True)

    st.markdown('<p style="text-align: justify; font-weight: bold"> Expandir a partir das cidades selecionadas no Modelo Matem√°tico ou Modelo K-means.</p>', unsafe_allow_html = True)

    st.markdown('<p style="text-align: justify; font-weight: bold"> Disponibilizar meios de doa√ß√£o por boleto, cart√£o de cr√©dito, pix, entre outros meios, direto pelo site e com possibilidade de recorr√™ncia. </p>', unsafe_allow_html = True)
    
    st.markdown('<p style="text-align: justify; font-weight: bold"> Inclus√£o de op√ß√£o de valores pr√©-cadastrados, deixando a op√ß√£o "outros" habilitada tamb√©m para caso a pessoa doadora queira doar um valor diferente.</p>', unsafe_allow_html = True)
